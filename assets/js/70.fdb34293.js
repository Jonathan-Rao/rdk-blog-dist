(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{456:function(s,n,a){"use strict";a.r(n);var e=a(8),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一、为什么要用typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么要用typescript"}},[s._v("#")]),s._v(" 一、为什么要用TypeScript")]),s._v(" "),n("p",[n("code",[s._v("TypeScript")]),s._v("可以让我们开发中避免一些"),n("code",[s._v("类型")]),s._v("或者"),n("code",[s._v("一些不是我们预期希望的代码结果")]),s._v("错误。xxx is not defined 我们都知道"),n("code",[s._v("JavaScript")]),s._v("错误是在运行中才抛出的，但是"),n("code",[s._v("TypeScript")]),s._v("错误直接是在编辑器里告知我们的，这极大的提升了开发效率，也不用花大量的时间去写单测，同时也避免了大量的时间排查"),n("code",[s._v("Bug")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"二、typescript优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、typescript优缺点"}},[s._v("#")]),s._v(" 二、TypeScript优缺点")]),s._v(" "),n("h3",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("一般我们在前后端联调时，都要去看接口文档上的字段类型，而"),n("code",[s._v("TypeScript")]),s._v("会自动帮我们识别当前的类型。节省了我们去看"),n("code",[s._v("文档")]),s._v("或者"),n("code",[s._v("network")]),s._v("时间。这叫做类型推导(待会我们会讲到)")])]),s._v(" "),n("li",[n("p",[s._v("友好地在编辑器里提示错误，避免代码在运行时类型隐式转换踩坑。")])])]),s._v(" "),n("h3",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("有一定的学习成本，"),n("code",[s._v("TypeScript")]),s._v("中有几种类型概念，"),n("code",[s._v("interface接口")]),s._v("、"),n("code",[s._v("class类")]),s._v("、"),n("code",[s._v("enum枚举")]),s._v("、"),n("code",[s._v("generics泛型")]),s._v("等这些需要我们花时间学习。")])]),s._v(" "),n("li",[n("p",[s._v("可能和一些插件库结合的不是很完美")])])]),s._v(" "),n("h2",{attrs:{id:"三、typescript运行流程及javascript代码运行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、typescript运行流程及javascript代码运行流程"}},[s._v("#")]),s._v(" 三、TypeScript运行流程及JavaScript代码运行流程")]),s._v(" "),n("p",[s._v("1. JavaScript运行流程如下，依赖NodeJs环境和浏览器环境")]),s._v(" "),n("ul",[n("li",[s._v("将"),n("code",[s._v("JavaScript")]),s._v("代码转换为"),n("code",[s._v("JavaScript-AST")])]),s._v(" "),n("li",[s._v("将"),n("code",[s._v("AST")]),s._v("代码转换为字节码")]),s._v(" "),n("li",[s._v("运算时计算字节码")])]),s._v(" "),n("p",[s._v("2. TypeScript运行流程，以下操作均为TSC操作，三步执行完继续同上操作，让浏览器解析")]),s._v(" "),n("ul",[n("li",[s._v("将"),n("code",[s._v("TypeScript")]),s._v("代码编译为 "),n("code",[s._v("TypeScript-AST")])]),s._v(" "),n("li",[s._v("检查"),n("code",[s._v("AST")]),s._v("代码上类型检查")]),s._v(" "),n("li",[s._v("类型检查后，编译为"),n("code",[s._v("JavaScript")]),s._v("代码")]),s._v(" "),n("li",[n("code",[s._v("JavaScript")]),s._v("代码转换为"),n("code",[s._v("JavaScript-AST")])]),s._v(" "),n("li",[s._v("将"),n("code",[s._v("AST")]),s._v("代码转换为字节码")]),s._v(" "),n("li",[s._v("运算时计算字节码")])]),s._v(" "),n("h2",{attrs:{id:"四、typescript和javascript区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、typescript和javascript区别"}},[s._v("#")]),s._v(" 四、TypeScript和JavaScript区别")]),s._v(" "),n("p",[s._v("只有搞懂了二者的区别，我们才可以更好的理解"),n("code",[s._v("TypeScript")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("类型系统特性")]),s._v(" "),n("th",[s._v("JavaScript")]),s._v(" "),n("th",[s._v("TypeScript")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("类型是如何绑定？")]),s._v(" "),n("td",[s._v("动态")]),s._v(" "),n("td",[s._v("静态")])]),s._v(" "),n("tr",[n("td",[s._v("是否存在类型隐式转换？")]),s._v(" "),n("td",[s._v("是")]),s._v(" "),n("td",[s._v("否")])]),s._v(" "),n("tr",[n("td",[s._v("何时检查类型？")]),s._v(" "),n("td",[s._v("运行时")]),s._v(" "),n("td",[s._v("编译时")])]),s._v(" "),n("tr",[n("td",[s._v("何时报告错误")]),s._v(" "),n("td",[s._v("运行时")]),s._v(" "),n("td",[s._v("编译时")])])])]),s._v(" "),n("h3",{attrs:{id:"类型绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型绑定"}},[s._v("#")]),s._v(" 类型绑定")]),s._v(" "),n("p",[s._v("JavaScript")]),s._v(" "),n("p",[n("code",[s._v("JavaScript")]),s._v("动态绑定类型，只有运行程序才能知道类型，在程序运行之前"),n("code",[s._v("JavaScript")]),s._v("对类型一无所知")]),s._v(" "),n("p",[s._v("TypeScript")]),s._v(" "),n("p",[n("code",[s._v("TypeScript")]),s._v("是在程序运行前（也就是编译时）就会知道当前是什么类型。当然如果该变量没有定义类型，那么"),n("code",[s._v("TypeScript")]),s._v("会自动类型推导出来。")]),s._v(" "),n("h3",{attrs:{id:"类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[s._v("#")]),s._v(" 类型转换")]),s._v(" "),n("p",[s._v("JavaScript")]),s._v(" "),n("p",[s._v("比如在"),n("code",[s._v("JavaScript")]),s._v("中"),n("code",[s._v("1 + true")]),s._v("这样一个代码片段，"),n("code",[s._v("JavaScript")]),s._v("存在隐式转换，这时"),n("code",[s._v("true")]),s._v("会变成"),n("code",[s._v("number")]),s._v("类型"),n("code",[s._v("number(true)")]),s._v("和1相加。")]),s._v(" "),n("p",[s._v("TypeScript")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("TypeScript")]),s._v("中，"),n("code",[s._v("1+true")]),s._v("这样的代码会在"),n("code",[s._v("TypeScript")]),s._v("中报错，提示"),n("code",[s._v("number")]),s._v("类型不能和"),n("code",[s._v("boolean")]),s._v("类型进行运算。")]),s._v(" "),n("h3",{attrs:{id:"何时检查类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何时检查类型"}},[s._v("#")]),s._v(" 何时检查类型")]),s._v(" "),n("p",[s._v("JavaScript")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("JavaScript")]),s._v("中只有在程序运行时才能检查类型。类型也会存在隐式转换，很坑。")]),s._v(" "),n("p",[s._v("TypeScript")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("TypeScript")]),s._v("中，在编译时就会检查类型，如果和预期的类型不符合直接会在编辑器里报错、爆红")]),s._v(" "),n("h3",{attrs:{id:"何时报告错误"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何时报告错误"}},[s._v("#")]),s._v(" 何时报告错误")]),s._v(" "),n("p",[s._v("JavaScript")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("JavaScript")]),s._v("只有在程序执行时才能抛出异常，"),n("code",[s._v("JavaScript")]),s._v("存在隐式转换，等我们程序执行时才能真正的知道代码类型是否是预期的类型，代码是不是有效。")]),s._v(" "),n("p",[s._v("TypeScript")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("TypeScript中")]),s._v("，当你在编辑器写代码时，如有错误则会直接抛出异常，极大得提高了效率，也是方便。")]),s._v(" "),n("h2",{attrs:{id:"五、typescript总共围绕两种模式展开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、typescript总共围绕两种模式展开"}},[s._v("#")]),s._v(" 五、TypeScript总共围绕两种模式展开")]),s._v(" "),n("h3",{attrs:{id:"显式注解类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#显式注解类型"}},[s._v("#")]),s._v(" 显式注解类型")]),s._v(" "),n("p",[s._v("举个栗子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let name: string = "前端娱乐圈";\n\nlet age: number = 38;\n\nlet hobby: string[] = ["write code", "玩游戏"]\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("显式注解类型就是，声明变量时定义上类型（官方话语就是声明时带上注解），让我们一看就明白，哦~，这个"),n("code",[s._v("name")]),s._v("是一个"),n("code",[s._v("string")]),s._v("类型。")]),s._v(" "),n("h3",{attrs:{id:"推导类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#推导类型"}},[s._v("#")]),s._v(" 推导类型")]),s._v(" "),n("p",[s._v("举个栗子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let name = "前端娱乐圈"; // 是一个string类型\n\nlet age = 38;  // 是一个number类型\n\nlet hobby = ["write code", "玩游戏"] // 是一个string数组类型\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("推导类型就是去掉显示注解，系统自动会识别当前值是一个什么类型的。")]),s._v(" "),n("h2",{attrs:{id:"六、安装typescript-运行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、安装typescript-运行"}},[s._v("#")]),s._v(" 六、安装TypeScript && 运行")]),s._v(" "),n("h3",{attrs:{id:"typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[s._v("#")]),s._v(" typescript")]),s._v(" "),n("p",[s._v("全局安装"),n("code",[s._v("typescript")]),s._v("环境。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm i -g typescript\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("可是这只是安装了"),n("code",[s._v("typescript")]),s._v("，那我们怎么运行"),n("code",[s._v(".ts")]),s._v("文件呢，安装完"),n("code",[s._v("typescript")]),s._v("我们就可以执行"),n("code",[s._v("tsc")]),s._v("命令。")]),s._v(" "),n("p",[s._v("如：我们的文件叫做"),n("code",[s._v("index.ts")]),s._v("，直接在命令行执行"),n("code",[s._v("tsc index.ts")]),s._v("即可。然后就可以看到在目录下编译出来一个"),n("code",[s._v("index.js")]),s._v("，这就是"),n("code",[s._v("tsc")]),s._v("编译完的结果。")]),s._v(" "),n("p",[s._v("index.ts")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const userName: string = "前端娱乐圈"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("运行"),n("code",[s._v("tsc index.ts")]),s._v("，你可以看见在"),n("code",[s._v("index.ts")]),s._v("的同级下又生成一个"),n("code",[s._v("index.js")]),s._v("，如下就是编译的结果文件"),n("code",[s._v("index.js")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var userName = "前端娱乐圈"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面我们知道了运行"),n("code",[s._v("tsc")]),s._v("命令就可以编译生成一个文件，有的小伙伴觉得这样太麻烦了，每次运行只是编译出来一个文件还不是运行，还得用"),n("code",[s._v("node index.js")]),s._v("才可以运行。不急我们接着往下看")]),s._v(" "),n("h3",{attrs:{id:"ts-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts-node"}},[s._v("#")]),s._v(" ts-node")]),s._v(" "),n("p",[s._v("我们来看一下这个插件"),n("code",[s._v("ts-node")]),s._v("，这个插件可以直接运行"),n("code",[s._v(".ts")]),s._v("文件，并且也不会编译出来"),n("code",[s._v(".js")]),s._v("文件。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm i ts-node\n\n// 运行 ts-node index.ts\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("讲到这里我们了解了为什么要用TypeScript和它的优缺点以及它的运行工作方式。")]),s._v(" "),n("p",[s._v("那么接下来步入"),n("code",[s._v("TypeScript")]),s._v("基础知识的海洋啦~，follow me。")]),s._v(" "),n("p",[s._v("感觉有帮助的小伙伴可以关注一下：前端娱乐圈 公众号，谢谢啦~，每天更新一篇小技巧")]),s._v(" "),n("h2",{attrs:{id:"七、基础知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、基础知识"}},[s._v("#")]),s._v(" 七、基础知识")]),s._v(" "),n("h3",{attrs:{id:"_1-基础静态类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础静态类型"}},[s._v("#")]),s._v(" 1. 基础静态类型")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("TypeScript")]),s._v("中基础类型跟我们"),n("code",[s._v("JavScript")]),s._v("中基础类型是一样的。只是有各别是"),n("code",[s._v("Ts")]),s._v("里面新出的。")]),s._v(" "),n("h4",{attrs:{id:"_1-number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-number"}},[s._v("#")]),s._v(" 1. number")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const count: number = 18; // 显示注解一个number类型\n\nconst count1 = 18; // 不显示注解，ts会自动推导出来类型\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"_2-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-string"}},[s._v("#")]),s._v(" 2. string")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const str: string = "前端娱乐圈"; // 显示注解一个string类型\n\nconst str1 = "蛙人"; // 不显示注解，ts会自动推导出来类型\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_3-boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-boolean"}},[s._v("#")]),s._v(" 3. boolean")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const status: string = false; // 显示注解一个string类型\n\nconst status1 = true; // 不显示注解，ts会自动推导出来类型\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_4-null"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-null"}},[s._v("#")]),s._v(" 4. null")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const value: null = null;\n\nconst value: null = undefined; // 这一点null类型可以赋值undefined跟在 js中是一样的，null == undefined\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_5-undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-undefined"}},[s._v("#")]),s._v(" 5. undefined")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const value: undefined = undefined;\n\nconst value: undefined = null; // 这一点null类型可以赋值undefined跟在 js中是一样的，null == undefined\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_6-void"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-void"}},[s._v("#")]),s._v(" 6. void")]),s._v(" "),n("p",[s._v("估计到这有一些小伙伴可能对"),n("code",[s._v("void")]),s._v("这个比较陌生，以为只有"),n("code",[s._v("TypeScript")]),s._v("才有的。其实不是哈，在我们"),n("code",[s._v("JavaScript")]),s._v("就已经存在"),n("code",[s._v("void")]),s._v("关键字啦，它的意思就是无效的，有的小伙伴可能看见过早些项目里面"),n("code",[s._v('<a href="javascript: void(0)">')]),s._v("这是控制"),n("code",[s._v("a")]),s._v("标签的跳转默认行为。你不管怎么执行"),n("code",[s._v("void")]),s._v("方法它都是返回"),n("code",[s._v("undefined")])]),s._v(" "),n("p",[s._v("那么在我们"),n("code",[s._v("TypeScript")]),s._v("中"),n("code",[s._v("void")]),s._v("类型是什么呢。它也是代表无效的，一般只用在函数上，告诉别人这个函数没有返回值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function fn(): void {} // 正确\n\nfunction testFn(): void {\n    return 1; // 报错，不接受返回值存在\n}\n\nfunction fn1(): void { return undefined} // 显示返回undefined类型，也是可以的\n\nfunction fn2(): void { return null} // 显示返回null类型也可以，因为 null == undefined\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"_7-never"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-never"}},[s._v("#")]),s._v(" 7. never")]),s._v(" "),n("p",[n("code",[s._v("never")]),s._v("一个永远不会有值的类型或者也可以说一个永远也执行不完的类型，代表用于不会有值，"),n("code",[s._v("undefined")]),s._v("、"),n("code",[s._v("null")]),s._v("也算做是值。一般这个类型就不会用到，也不用。大家知道这个类型就行。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const test: never = null; // 错误\nconst test1: never = undefined // 错误\n\nfunction Person(): never { // 正确，因为死循环了，一直执行不完\n    while(true) {}\n}\n\nfunction Person(): never { // 正确，因为递归，永远没有出口\n    Person()\n}\n\nfunction Person(): never { // 正确 代码报错了，执行不下去\n    throw new Error()\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h4",{attrs:{id:"_8-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-any"}},[s._v("#")]),s._v(" 8. any")]),s._v(" "),n("p",[n("code",[s._v("any")]),s._v("这个类型代表任何的、任意的。希望大家在项目中，不要大片定义"),n("code",[s._v("any")]),s._v("类型。虽然它真的好使，那这样我们写"),n("code",[s._v("TypeScript")]),s._v("就没有任何意义了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let value: any = ""; // 正确\nvalue = null // 正确\nvalue = {} // 正确\nvalue = undefined // 正确\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"_9-unknown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-unknown"}},[s._v("#")]),s._v(" 9. unknown")]),s._v(" "),n("p",[n("code",[s._v("unknown")]),s._v("类型是我们"),n("code",[s._v("TypeScript")]),s._v("中第二个"),n("code",[s._v("any")]),s._v("类型，也是接受任意的类型的值。它的英文翻译过来就是未知的，我们来看一下栗子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let value: unknown = ""\t\nvalue = 1;\nvalue = "fdsfs"\nvalue = null\nvalue = {}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("那现在肯定有小伙伴疑惑，诶，那它"),n("code",[s._v("unknown")]),s._v("相当于是"),n("code",[s._v("any")]),s._v("类型，那二者的区别是什么。我们来看一下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let valueAny: any = "";\nlet valueUnknown: unknown = "";\n\nvalueAny = "蛙人";\nvalueUnknown = "前端娱乐圈"\n\nlet status: null = false;\nstatus = valueAny; // 正确\nstatus = valueUnknown // 报错，不能将unknown类型分配给null类型\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("我们来看一下上面的，为什么"),n("code",[s._v("any")]),s._v("类型就能被赋值成功，而"),n("code",[s._v("unknown")]),s._v("类型不行呢，从它俩的意义来上看，还是有点区别的，"),n("code",[s._v("any")]),s._v("任何的，任意的、"),n("code",[s._v("unknown")]),s._v("未知的。所以你给"),n("code",[s._v("unknown")]),s._v("类型赋值任何类型都没关系，因为它本来就是未知类型嘛。但是你如果把它的"),n("code",[s._v("unknown")]),s._v("类型去被赋值一个"),n("code",[s._v("null")]),s._v("类型，这时人家"),n("code",[s._v("null")]),s._v("这边不干了，我不接受"),n("code",[s._v("unknown")]),s._v("类型。")]),s._v(" "),n("p",[s._v("说白了一句话，别人不接受"),n("code",[s._v("unknown")]),s._v("类型，而"),n("code",[s._v("unknown")]),s._v("类型接受别人，哈哈哈哈。")]),s._v(" "),n("h3",{attrs:{id:"_2-对象静态类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象静态类型"}},[s._v("#")]),s._v(" 2. 对象静态类型")]),s._v(" "),n("p",[s._v("说起对象类型，我们肯定都能想到对象包含"),n("code",[s._v("{}")]),s._v("、"),n("code",[s._v("数组")]),s._v("、"),n("code",[s._v("类")]),s._v("、"),n("code",[s._v("函数")])]),s._v(" "),n("h4",{attrs:{id:"_1-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-object"}},[s._v("#")]),s._v(" 1. object && {}")]),s._v(" "),n("p",[s._v("其实这俩意思一样，"),n("code",[s._v("{}")]),s._v("、"),n("code",[s._v("object")]),s._v("表示非原始类型，也就是除"),n("code",[s._v("number")]),s._v("，"),n("code",[s._v("string")]),s._v("，"),n("code",[s._v("boolean")]),s._v("，"),n("code",[s._v("symbol")]),s._v("，"),n("code",[s._v("null")]),s._v("或"),n("code",[s._v("undefined")]),s._v("之外的类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list: object = {} // 空对象\n\nconst list1: object = null; // null对象\n\nconst list: object = [] // 数组对象\n\nconst list: {} = {}\nlist.name = 1 // 报错 不可更改里面的字段，但是可以读取\nlist.toString()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"_2-数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组"}},[s._v("#")]),s._v(" 2. 数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list: [] = []; // 定义一个数组类型\n\nconst list1: number[] = [1,2] // 定义一个数组，里面值必须是number\n\nconst list2: object[] = [null, {}, []] // 定义一个数组里面必须是对象类型的\n\nconst list3: Array<number> = [1,2,3] // 泛型定义数组必须是number类型，泛型我们待会讲到\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"_3-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-类"}},[s._v("#")]),s._v(" 3. 类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 类\nclass ClassPerson = {\n    name: "前端娱乐圈"\n}\n\nconst person: ClassPerson = new Person();\nperson.xxx = 123; // 这行代码报错，因为当前类中不存在该xxx属性\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"_4-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-函数"}},[s._v("#")]),s._v(" 4. 函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 函数\nconst fn: () => string = () => "前端娱乐圈" // 定义一个变量必须是函数类型的，返回值必须是string类型\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_3-函数类型注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数类型注解"}},[s._v("#")]),s._v(" 3. 函数类型注解")]),s._v(" "),n("p",[s._v("这里说一下函数显示注解和函数参数不会类型推导问题。")]),s._v(" "),n("h4",{attrs:{id:"_1-函数返回类型为number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数返回类型为number"}},[s._v("#")]),s._v(" 1. 函数返回类型为number")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function fn(a, b): number {\n    return a + b;\n}\nfn(1, 2)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"_2-函数void"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数void"}},[s._v("#")]),s._v(" 2. 函数void")]),s._v(" "),n("p",[s._v("显示注解为"),n("code",[s._v("void")]),s._v("类型，函数没有返回值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function fn(): void {\n    console.log(1)\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_3-函数不会自动类型推导"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数不会自动类型推导"}},[s._v("#")]),s._v(" 3. 函数不会自动类型推导")]),s._v(" "),n("p",[s._v("可以看到下面的函数类型，不会自动类型推导，我们实参虽然传入的1和2，但是形参方面是可以接受任意类型值的，所以系统也识别不出来你传递的什么，所以这里得需要我们显示定义注解类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function testFnQ(a, b) {\n    return a + b\n}\ntestFnQ(1,2)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e22b46ebd9244b9fa9c7158a35911826~tplv-k3u1fbpfcp-watermark.awebp",alt:"微信截图_20210824233905.png"}})]),s._v(" "),n("p",[s._v("我们来改造一下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function testFnQ(a:number, b:number) {\n    return a + b\n}\ntestFnQ(1,2)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1ca8dd6aff646e7b80c53518fdf28c1~tplv-k3u1fbpfcp-watermark.awebp",alt:"微信截图_20210825001425.png"}})]),s._v(" "),n("p",[s._v("我们再来看一下参数对象显示注解类型，也是在"),n("code",[s._v(":")]),s._v("号后面赋值每个字段类型即可。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function testFnQ(obj : {num: number}) {\n    return obj.num\n}\ntestFnQ({num: 18})\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_4-元组tuple"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-元组tuple"}},[s._v("#")]),s._v(" 4. 元组Tuple")]),s._v(" "),n("p",[s._v("元组用于表示一个已知数组的数量和类型的数组，定义数组中每一个值的类型，一般不经常使用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const arr: [string, number] = ["前端娱乐圈", 1]\n\nconst arr: [string, string] = ["前端娱乐圈", 1] // 报错\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_5-枚举enum"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-枚举enum"}},[s._v("#")]),s._v(" 5. 枚举Enum")]),s._v(" "),n("p",[n("code",[s._v("Enum")]),s._v("枚举类型，可以设置默认值，如果不设置则为索引。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('enum color {\n    RED,\n    BLUE = "blue",\n    GREEN = "green"\n}\n\n// color["RED"] 0\n// color["BLUE"] blue\n\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("像上面的"),n("code",[s._v("color")]),s._v("中"),n("code",[s._v("RED没")]),s._v("有设置值，那么它的值则为"),n("code",[s._v("0")]),s._v("，如果"),n("code",[s._v("BLUE")]),s._v("也不设置的话那么它的值则是"),n("code",[s._v("1")]),s._v("，它们这里是递增。如果设置值则是返回设置的值")]),s._v(" "),n("p",[s._v("注意这里还有一个问题，直接来上代码")]),s._v(" "),n("p",[s._v("通过上面学习我们知道了"),n("code",[s._v("enum")]),s._v("可以递增值，也可以设置默认值。但是有一点得注意一下，"),n("code",[s._v("enum")]),s._v("没有"),n("code",[s._v("json")]),s._v("对象那样灵活，"),n("code",[s._v("enum")]),s._v("不能在任意字段上设置默认值。")]),s._v(" "),n("p",[s._v("比如下面栗子，"),n("code",[s._v("RED")]),s._v("没有设置值，然后"),n("code",[s._v("BLUE")]),s._v("设置了默认值，但是"),n("code",[s._v("GREEN")]),s._v("又没有设置，这时这个"),n("code",[s._v("GREEN")]),s._v("会报错。因为你第二个"),n("code",[s._v("BLUE")]),s._v("设置完默认值，第三又不设置，这时代码都不知道该咋递增了，所以报错。还有一种方案就是你给"),n("code",[s._v("BLUE")]),s._v("可以设置一个数字值，这时第三个"),n("code",[s._v("GREEN")]),s._v("不设置也会跟着递增，因为都是"),n("code",[s._v("number")]),s._v("类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 报错\nenum color {\n    RED,\n    BLUE = "blue",\n    GREEN\n}\n\n// good\nenum color {\n    RED,\t   // 0\n    BLUE = 4,  // 4\n    GREEN      // 5\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("比如"),n("code",[s._v("enum")]),s._v("枚举类型还可以反差，通过"),n("code",[s._v("value")]),s._v("查"),n("code",[s._v("key")]),s._v("值。像我们"),n("code",[s._v("json")]),s._v("对象就是不支持这种写法的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("enum color {\n    RED,\t   // 0\n    BLUE = 4,  // 4\n    GREEN      // 5\n}\n\nconsole.log(color[4]) // BLUE\nconsole.log(color[0]) // RED\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_5-接口interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-接口interface"}},[s._v("#")]),s._v(" 5. 接口Interface")]),s._v(" "),n("p",[s._v("接口"),n("code",[s._v("interface")]),s._v("是什么，接口"),n("code",[s._v("interface")]),s._v("就是方便我们定义一处代码，多处复用。接口里面也存在一些修饰符。下面我们来认识一下它们吧。")]),s._v(" "),n("h4",{attrs:{id:"_1-接口怎么复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-接口怎么复用"}},[s._v("#")]),s._v(" 1. 接口怎么复用")]),s._v(" "),n("p",[s._v("比如在讲到这之前，我们不知道"),n("code",[s._v("接口")]),s._v("这东西，可能需要给对象定义一个类型的话，你可能会这样做。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const testObj: { name: string, age: number } = { name: "前端娱乐圈", age: 18 }\n\nconst testObj1: { name: string, age: number } = { name: "蛙人", age: 18 }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("我们用接口来改造一下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    name: string,\n    age: number\n}\n\nconst testObj: Types = { name: "前端娱乐圈", age: 18 }\n\nconst testObj1: Types = { name: "蛙人", age: 18 }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("可以看到使用"),n("code",[s._v("interface")]),s._v("关键字定义一个接口，然后赋值给这两个变量，实现复用。")]),s._v(" "),n("h4",{attrs:{id:"_2-readonly修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-readonly修饰符"}},[s._v("#")]),s._v(" 2. readonly修饰符")]),s._v(" "),n("p",[n("code",[s._v("readonly")]),s._v("类型，只可读状态，不可更改。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    readonly name: string,\n    readonly age: number\n}\n\nconst testObj: Types = { name: "前端娱乐圈", age: 18 }\n\nconst testObj1: Types = { name: "蛙人", age: 18 }\n\ntestObj.name = "张三" // 无法更改name属性，因为它是只读属性\ntestObj1.name = "李四" // 无法更改name属性，因为它是只读属性\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"_3-可选修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-可选修饰符"}},[s._v("#")]),s._v(" 3. ?可选修饰符")]),s._v(" "),n("p",[s._v("可选修饰符以"),n("code",[s._v("?")]),s._v("定义，为什么需要可选修饰符呢，因为如果我们不写"),n("code",[s._v("可选修饰符")]),s._v("，那"),n("code",[s._v("interface")]),s._v("里面的属性都是必填的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    readonly name: string,\n    readonly age: number,\n    sex?: string\n}\n\nconst testObj: Types = { name: "前端娱乐圈", age: 18}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"_4-extends继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-extends继承"}},[s._v("#")]),s._v(" 4. extends继承")]),s._v(" "),n("p",[s._v("我们的"),n("code",[s._v("interface")]),s._v("也是可以继承的，跟ES6"),n("code",[s._v("Class")]),s._v("类一样，使用"),n("code",[s._v("extends")]),s._v("关键字。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    readonly name: string,\n    readonly age: number,\n    sex?: string\n}\n\ninterface ChildrenType extends Types { // 这ChildrenType接口就已经继承了父级Types接口\n    hobby: []\n}\n\nconst testObj: ChildrenType = { name: "前端娱乐圈", age: 18， hobby: ["code", "羽毛球"] }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"_5-propname扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-propname扩展"}},[s._v("#")]),s._v(" 5. propName扩展")]),s._v(" "),n("p",[s._v("interface里面这个功能就很强大，它可以写入不在interface里面的属性。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    readonly name: string,\n    readonly age: number,\n    sex?: string,\n}\n\nconst testObj: Types = { name: "前端娱乐圈", age: 19, hobby: [] }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面这个"),n("code",[s._v("testObj")]),s._v("这行代码会爆红，因为"),n("code",[s._v("hobby")]),s._v("属性不存在"),n("code",[s._v("interface")]),s._v("接口中，那么我们不存在的接口中的，还不让人家写了？。这时候可以使用自定义就是上面的"),n("code",[s._v("propName")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface Types {\n    readonly name: string,\n    readonly age: number,\n    sex?: string,\n    [propName: string]: any // propName字段必须是 string类型 or number类型。 值是any类型，也就是任意的\n}\n\nconst testObj: Types = { name: "前端娱乐圈", age: 19, hobby: [] }\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("在运行上面代码，就可以看到不爆红了~")]),s._v(" "),n("h3",{attrs:{id:"_6-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-type"}},[s._v("#")]),s._v(" 6. Type")]),s._v(" "),n("p",[s._v("我们再来看一下"),n("code",[s._v("Type")]),s._v("，这个是声明类型别名使的，别名类型只能定义是："),n("code",[s._v("基础静态类型")]),s._v("、"),n("code",[s._v("对象静态类型")]),s._v("、"),n("code",[s._v("元组")]),s._v("、"),n("code",[s._v("联合类型")]),s._v("。")]),s._v(" "),n("blockquote",[n("p",[s._v("注意：type别名不可以定义interface")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('type Types = string;\n\ntype TypeUnite = string | number\n\nconst name: typeUnite = "前端娱乐圈"\nconst age: typeUnite = 18\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"_1-那么type类型别名和interface接口有什么区别呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-那么type类型别名和interface接口有什么区别呢"}},[s._v("#")]),s._v(" 1. 那么type类型别名和interface接口有什么区别呢")]),s._v(" "),n("h5",{attrs:{id:"_1-type不支持interface声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-type不支持interface声明"}},[s._v("#")]),s._v(" 1. type不支持interface声明")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type Types = number\ntype Types = string // 报错， 类型别名type不允许出现重复名字\n\ninterface Types1 {\n    name: string\n}\n\ninterface Types1 {\n    age: number\n}\n\n// interface接口可以出现重复类型名称，如果重复出现则是，合并起来也就是变成 { name：string, age: number }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("第一个"),n("code",[s._v("Types")]),s._v("类型别名type不允许出现重复名字，interface接口可以出现重复类型名称，如果重复出现则是，合并起来也就是变 "),n("code",[s._v("{ name：string, age: number }")])]),s._v(" "),n("p",[s._v("再来看一下interface另一种情况")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface Types1 {\n    name: string\n}\n\ninterface Types1 {\n    name: number\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("可以看到上面两个同名称的"),n("code",[s._v("interface")]),s._v("接口，里面的属性也是同名称，但是类型不一样。这第二个的"),n("code",[s._v("Types1")]),s._v("就会爆红，提示：后续声明的接口，必须跟前面声明的同名属性类型必须保持一致，把后续声明的"),n("code",[s._v("name")]),s._v("它类型换成"),n("code",[s._v("string")]),s._v("即可。")]),s._v(" "),n("h5",{attrs:{id:"_2-type支持表达式-interface不支持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-type支持表达式-interface不支持"}},[s._v("#")]),s._v(" 2. type支持表达式 interface不支持")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const count: number = 123\ntype testType = typeof count\n\nconst count: number = 123\n\ninterface testType {\n    [name: typeof count]: any // 报错\n}\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("可以看到上面"),n("code",[s._v("type")]),s._v("支持表达式，而"),n("code",[s._v("interface")]),s._v("不支持")]),s._v(" "),n("h5",{attrs:{id:"_3-type-支持类型映射-interface不支持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-type-支持类型映射-interface不支持"}},[s._v("#")]),s._v(" 3. type 支持类型映射，interface不支持")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('type keys = "name" | "age"\ntype KeysObj = {\n    [propName in keys]: string\n}\n\nconst PersonObj: KeysObj = { // 正常运行\n    name: "蛙人",\n    age: "18"\n}\n\ninterface testType {\n    [propName in keys]: string // 报错\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_7-联合类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-联合类型"}},[s._v("#")]),s._v(" 7. 联合类型")]),s._v(" "),n("p",[n("code",[s._v("联合类型")]),s._v("用"),n("code",[s._v("|")]),s._v("表示，说白了就是满足其中的一个"),n("code",[s._v("类型")]),s._v("就可以。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const statusTest: string | number = "前端娱乐圈"\n\nconst flag: boolean | number = true\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("再来看一下栗子。我们用函数参数使用联合类型看看会发生什么")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function testStatusFn(params: number | string) {\n    console.log(params.toFixed()) // 报错\n}\n\ntestStatusFn(1)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面我们说过了，函数参数类型不能类型自动推导，更何况现在用上联合类型，系统更懵逼了，不能识别当前实参的类型。所以访问当前类型上的方法报错。")]),s._v(" "),n("p",[s._v("接下来带大家看一些"),n("code",[s._v("类型保护")]),s._v("，听着挺高级，其实这些大家都见过。别忘了记得关注：前端娱乐圈 公众号哦，嘻嘻")]),s._v(" "),n("h4",{attrs:{id:"_1-typeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-typeof"}},[s._v("#")]),s._v(" 1. typeof")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function testStatusFn(params: number | string) {\n    console.log(params.toFixed()) // 报错\n}\ntestStatusFn(1)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("改造后")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 正常\nfunction testStatusFn(params: string | number) {\n    if (typeof params == "string") {\n        console.log(params.split)\n    }\n\n    if (typeof params == "number") {\n        console.log(params.toFixed)\n    }\n}\n\ntestStatusFn(1)\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h4",{attrs:{id:"_2-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-in"}},[s._v("#")]),s._v(" 2. in")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 报错\ninterface frontEnd {\n    name: string\n}\n\ninterface backEnd {\n    age: string\n}\n\nfunction testStatusFn(params: frontEnd | backEnd) {\n    console.log(params.name)\n}\n\ntestStatusFn({name: "蛙人"})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("改造后")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 正常\nfunction testStatusFn(params: frontEnd | backEnd) {\n    if ("name" in params) {\n        console.log(params.name)\n    }\n\n    if ("age" in params) {\n        console.log(params.age)\n    }\n}\n\ntestStatusFn({name: "蛙人"})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h4",{attrs:{id:"_3-as-断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-as-断言"}},[s._v("#")]),s._v(" 3. as 断言")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 报错\ninterface frontEnd {\n    name: string\n}\n\ninterface backEnd {\n    age: string\n}\n\nfunction testStatusFn(params: frontEnd | backEnd) {\n    console.log(params.name)\n}\n\ntestStatusFn({name: "蛙人"})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("改造后")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 正常\nfunction testStatusFn(params: frontEnd | backEnd) {\n    if ("name" in params) {\n        const res = (params as frontEnd).name\n        console.log(res)\n    }\n\n    if ("age" in params) {\n        const res = (params as backEnd).age\n        console.log(res)\n    }\n}\n\ntestStatusFn({age: 118})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"_8-交叉类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-交叉类型"}},[s._v("#")]),s._v(" 8. 交叉类型")]),s._v(" "),n("p",[n("code",[s._v("交叉类型")]),s._v("就是跟联合类型相反，它用"),n("code",[s._v("&")]),s._v("表示，"),n("code",[s._v("交叉类型")]),s._v("就是两个类型必须存在。这里还用上面的联合类型的栗子来看下。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface frontEnd {\n    name: string\n}\n\ninterface backEnd {\n    age: number\n}\n\nfunction testStatusFn(params: frontEnd & backEnd) {}\n\ntestStatusFn({age: 118, name: "前端娱乐圈"})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("这里我们可以看到实参必须传入两个**接口(interface)**全部的属性值才可以。联合类型是传入其中类型就可以。")]),s._v(" "),n("p",[s._v("注意：我们的接口interface出现同名属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface frontEnd {\n    name: string\n}\n\ninterface backEnd {\n    name: number\n}\n\nfunction testStatusFn(params: frontEnd & backEnd) {\n    console.log(params)\n}\n\ntestStatusFn({name: "前端"})\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("上面我们两个接口类型中都出现了同名属性，但是类型不一样，这时类型就会变为"),n("code",[s._v("never")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51e337707b6641e590bbb0139fabacdb~tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"_9-泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-泛型"}},[s._v("#")]),s._v(" 9. 泛型")]),s._v(" "),n("p",[s._v("泛型是"),n("code",[s._v("TypeScript")]),s._v("中最难理解的了，这里我尽量用通俗易懂的方式讲明白。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function test(a: string | number, b: string | number) {\n    console.log(a, b)\n}\ntest(1, "前端娱乐圈")\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("比如上面栗子，函数参数"),n("code",[s._v("注解类型")]),s._v("定义"),n("code",[s._v("string")]),s._v("和"),n("code",[s._v("number")]),s._v("，调用函数实参传入也没什么问题，但是有个需求，就是实参我们必须传入同样的类型（传入两个"),n("code",[s._v("number")]),s._v("类型）。虽然上面这种联合类型也可以实现，但是如果我们要在加一个"),n("code",[s._v("boolean")]),s._v("类型，那么联合类型还得在追加一个"),n("code",[s._v("boolean")]),s._v("，那这样代码太冗余了。")]),s._v(" "),n("p",[s._v("这时就需要用到泛型了，泛型是专门针对不确定的类型使用，并且灵活。泛型的使用大部分都是使用"),n("code",[s._v("<T>")]),s._v("，当然也可以随便使用，如："),n("code",[s._v("<Test>")]),s._v("、"),n("code",[s._v("<Custom>")]),s._v("都可以。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function test<T>(a: T, b: T) {\n    console.log(a, b)\n}\ntest<number>(1, "前端娱乐圈") // 调用后面跟着尖括号这就是泛型的类型，这时报错，因为在调用的使用类型是number，所以只能传入相同类型的\n\ntest<boolean>(true, false)\n\ntest<string>("前端娱乐圈", "蛙人")\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面这使用泛型就解决了我们刚才说的传入同一个类型参数问题，但是泛型也可以使用不同的参数，可以把调用类型定义为"),n("code",[s._v("<any>")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function test<T>(a: T, b: T) {\n    console.log(a, b)\n}\n\ntest<any>(1, "前端娱乐圈")\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("但是上面这种又有一种问题，它可以传入对象，但是如果我们只希望传入"),n("code",[s._v("number")]),s._v("类型和"),n("code",[s._v("string")]),s._v("类型。那么我们泛型也给我们提供了**"),n("code",[s._v("约束")]),s._v("类型。泛型使用"),n("code",[s._v("extends")]),s._v("进行了类型约束**，只能选择"),n("code",[s._v("string")]),s._v("、"),n("code",[s._v("number")]),s._v("类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function test<T extends number | string, Y extends number | string>(a: T, b: Y) {\n    console.log(a, b)\n}\n\ntest<number, string>(18, "前端娱乐圈")\n\ntest<string, number>("前端娱乐圈", 18)\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("这时，传入泛型时使用"),n("code",[s._v("，")]),s._v("逗号分隔，来定义每一个类型希望是什么。记住，只有我们不确定的类型，可以使用泛型。")]),s._v(" "),n("h3",{attrs:{id:"_10-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-模块"}},[s._v("#")]),s._v(" 10. 模块")]),s._v(" "),n("p",[n("code",[s._v("TypeScript")]),s._v("也支持"),n("code",[s._v("import")]),s._v("和"),n("code",[s._v("export")]),s._v("这里大多数小伙伴都知道，这里都不多讲啦。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 导入\n\nimport xxx, { xxx } from "./xxx"\n\n// 导出\n\nexport default {}\n\nexport const name = "前端娱乐圈"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("如有不明白的小伙伴，可以看我以前文章 "),n("a",{attrs:{href:"https://juejin.cn/post/6938581764432461854",title:"https://juejin.cn/post/6938581764432461854",target:"_blank",rel:"noopener noreferrer"}},[s._v("聊聊什么是CommonJs和Es Module及它们的区别"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"_11-class类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-class类"}},[s._v("#")]),s._v(" 11. Class类")]),s._v(" "),n("blockquote",[n("p",[s._v("以下这三个修饰符是在"),n("code",[s._v("TypeScript")]),s._v("类中才能使用，在"),n("code",[s._v("JavaScript")]),s._v("类中是不支持的。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c70075650c78403f99887132bd93acd2~tplv-k3u1fbpfcp-watermark.awebp",alt:"报错.png"}})]),s._v(" "),n("h4",{attrs:{id:"_1-public"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-public"}},[s._v("#")]),s._v(" 1. public")]),s._v(" "),n("p",[n("code",[s._v("public")]),s._v("为"),n("code",[s._v("类")]),s._v("的公共属性，就是不管在"),n("code",[s._v("类")]),s._v("的内部还是外部，都可以访问该"),n("code",[s._v("类")]),s._v("中属性及方法。默认定义的属性及方法都是"),n("code",[s._v("public")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Person {\n\tname = "前端娱乐圈";\n\tpublic age = 18;\n}\nconst res = new Person();\nconsole.log(res.name, res.age) // 前端娱乐圈 18\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("上面可以看到打印结果都能显示出来，"),n("code",[s._v("name")]),s._v("属性没有定义"),n("code",[s._v("public")]),s._v("公共属性，所以"),n("code",[s._v("类")]),s._v("里面定义的属性及方法默认都是"),n("code",[s._v("public")]),s._v("定义。")]),s._v(" "),n("h4",{attrs:{id:"_2-private"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-private"}},[s._v("#")]),s._v(" 2. private")]),s._v(" "),n("p",[n("code",[s._v("private")]),s._v("为"),n("code",[s._v("类")]),s._v("的私有属性，只有在当前"),n("code",[s._v("类")]),s._v("里面才能访问，当前"),n("code",[s._v("类")]),s._v("就是"),n("code",[s._v("{}")]),s._v("里面区域内。在"),n("code",[s._v("{}")]),s._v("外面是不能访问"),n("code",[s._v("private")]),s._v("定义的属性及方法的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Person {\n\tprivate name = "前端娱乐圈";\n\tprivate age = 18;\n}\nconst res = new Person();\nconsole.log(res.name, res.age) // 这俩行会爆红，当前属性为私有属性，只能在类内部访问\n\nclass Scholl extends Person {\n    getData() {\n        return this.username + "," + this.age\n    }\n}\nconst temp = new Scholl()\nconsole.log(temp.getData()) // 爆红~，虽然继承了Person类，但是private定义是只能在当前类访问，子类也不能访问。\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h4",{attrs:{id:"_3-protected"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-protected"}},[s._v("#")]),s._v(" 3. protected")]),s._v(" "),n("p",[n("code",[s._v("protected")]),s._v("为"),n("code",[s._v("类")]),s._v("的保护属性，只有在当前类和子类可以访问。也就是说用"),n("code",[s._v("protected")]),s._v("属性定义的子类也可以访问。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Person {\n    protected username = "前端娱乐圈";\n    protected age = 18;\n}\nconst res = new Person();\nconsole.log(res.name, res.age) // 这俩行会爆红，当前属性为私有属性，只能在类内部访问\n\nclass Scholl extends Person {\n    getData() {\n        return this.username + "," + this.age\n    }\n}\nconst temp = new Scholl()\nconsole.log(temp.getData()) // 前端娱乐圈，18。可以正常访问父类的属性\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h4",{attrs:{id:"_4-implements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-implements"}},[s._v("#")]),s._v(" 4. implements")]),s._v(" "),n("p",[n("code",[s._v("implements")]),s._v("关键字只能在"),n("code",[s._v("class")]),s._v("中使用，顾名思义，实现一个新的类，从父级或者从接口实现所有的属性和方法，如果在"),n("code",[s._v("PersonAll")]),s._v("类里面不写进去接口里面已有的属性和方法则会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface frontEnd {\n    name: string,\n    fn: () => void\n}\n\nclass PersonAll implements frontEnd {\n    name: "前端娱乐圈";\n\n    fn() {\n\n    }\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h4",{attrs:{id:"_5-抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-抽象类"}},[s._v("#")]),s._v(" 5. 抽象类")]),s._v(" "),n("p",[s._v("抽象类使用"),n("code",[s._v("abstract")]),s._v("关键字定义。"),n("code",[s._v("abstract")]),s._v("抽象方法不能实例化，如果，抽象类里面方法是抽象的，那么本身的类也必须是抽象的，抽象方法不能写函数体。父类里面有抽象方法，那么子类也必须要重新该方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 抽象类\nabstract class Boss {\n    name = "秦";\n    call() {} // 抽象方法不能写函数体\n}\n\nclass A extends Boss {\n    call() {\n        console.log(this.name);\n        console.log("A")\n    }\n}\n\nclass B extends Boss {\n    call() {\n         console.log("B")\n    }\n}\n\nnew A().call()\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("该抽象类使用场景，比如"),n("code",[s._v("A")]),s._v("需求或者"),n("code",[s._v("B")]),s._v("需求正好需要一个公共属性，然后本身还有一些自己的逻辑，就可以使用抽象类，抽象类只能在"),n("code",[s._v("TypeScript")]),s._v("中使用。")]),s._v(" "),n("h3",{attrs:{id:"_12-命名空间namespace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-命名空间namespace"}},[s._v("#")]),s._v(" 12. 命名空间namespace")]),s._v(" "),n("p",[s._v("我们学到现在可以看到，不知道小伙伴们发现没有，项目中文件是不是不能有重复的变量(不管你是不是一样的文件还是其它文件)，否则就直接爆红了。命名空间一个最明确的目的就是解决重名问题。")]),s._v(" "),n("p",[s._v("命名空间使用"),n("code",[s._v("namespace")]),s._v("关键字来定义，来看栗子吧。")]),s._v(" "),n("p",[s._v("index.ts")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("namespace SomeNameSpaceName {\n    const q = {}\n\n    export interface obj {\n        name: string\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面这样，就定义好了一个命名空间，可以看到变量"),n("code",[s._v("q")]),s._v("没有写"),n("code",[s._v("export")]),s._v("关键字，这证明它是内部的变量，就算别的"),n("code",[s._v(".ts")]),s._v("文件引用它，它也不会暴露出去。而"),n("code",[s._v("interface")]),s._v("这个"),n("code",[s._v("obj")]),s._v("接口是可以被全局访问的。")]),s._v(" "),n("p",[s._v("我们在别的页面访问当前命名空间")]),s._v(" "),n("h4",{attrs:{id:"_1-reference引入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-reference引入"}},[s._v("#")]),s._v(" 1. reference引入")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/// <reference path="./index.ts" />\nnamespace SomeNameSpaceName {\n\texport class person implements obj {\n\t\tname: "前端娱乐圈"\n\t}\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"_2-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-import"}},[s._v("#")]),s._v(" 2. import")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export interface valueData {\n     name: string\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import { valueData } from "./xxx.ts"\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这时使用命名空间之后完全可以解决不同文件重名爆红问题。")]),s._v(" "),n("h3",{attrs:{id:"_13-tsconfig-json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-tsconfig-json"}},[s._v("#")]),s._v(" 13. tsConfig.json")]),s._v(" "),n("p",[s._v("这个"),n("code",[s._v("tsconfig")]),s._v("文件，是我们编译ts文件，如何将"),n("code",[s._v("ts")]),s._v("文件编译成我们的"),n("code",[s._v("js")]),s._v("文件。"),n("code",[s._v("tsc -init")]),s._v("这个命令会生成该文件出来哈。执行完该命令，我们可以看到根目录下会生成一个"),n("code",[s._v("tsconfig.json")]),s._v("文件，里面有一堆属性。")]),s._v(" "),n("p",[s._v("那么我们怎么将"),n("code",[s._v("ts")]),s._v("文件编译成"),n("code",[s._v("js")]),s._v("文件呢，直接执行"),n("code",[s._v("tsc")]),s._v("命令可以将根目录下所有的"),n("code",[s._v(".ts")]),s._v("文件全部编译成"),n("code",[s._v(".js")]),s._v("文件输出到项目下。")]),s._v(" "),n("p",[s._v("更多配置文档，请参考"),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.tslang.cn%2Fdocs%2Fhandbook%2Fcompiler-options.html",title:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n    // include: ["*.ts"] // 执行目录下所有的ts文件转换成js文件\n    // include: ["index.ts"] // 只将项目下index.ts文件转换为js文件\n    // files: ["index.ts"] // 跟include一样，只执行当前数组值里面的文件,当前files必须写相对路径\n    // exclude: ["index.ts"] // exclude就是除了index.ts不执行，其它都执行\n\n    compilerOptions: {\n        removeComments: true, // 去掉编译完js文件的注释\n        outDir: "./build", // 最终输出的js文件目录\n        rootDir: "./src", // ts入口文件查找\n    }\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"八、实用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、实用类型"}},[s._v("#")]),s._v(" 八、实用类型")]),s._v(" "),n("p",[s._v("最后来说一下实用类型，"),n("code",[s._v("TypeScript")]),s._v("标准库自带了一些实用类型。这些实用类都是方便接口"),n("code",[s._v("Interface")]),s._v("使用。这里只列举几个常用的，更多实用类型"),n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.typescriptlang.org%2Fdocs%2Fhandbook%2Futility-types.html",title:"https://www.typescriptlang.org/docs/handbook/utility-types.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"_1-exclude"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-exclude"}},[s._v("#")]),s._v(" 1. Exclude")]),s._v(" "),n("p",[s._v("从一个类型中排除另一个类型，只能是联合类型，从"),n("code",[s._v("TypesTest")]),s._v("类型中排除"),n("code",[s._v("UtilityLast")]),s._v("类型。")]),s._v(" "),n("p",[s._v("适用于：并集类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface UtilityFirst {\n    name: string\n}\n\ninterface UtilityLast {\n    age: number\n}\n\ntype TypesTest = UtilityFirst | UtilityLast;\n\nconst ObjJson: Exclude<TypesTest, UtilityLast> = {\n    name: "前端娱乐圈"\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_2-extract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-extract"}},[s._v("#")]),s._v(" 2. Extract")]),s._v(" "),n("p",[n("code",[s._v("Extract")]),s._v("正好跟上面那个相反，这是选择某一个可赋值的联合类型，从"),n("code",[s._v("TypesTest")]),s._v("类型中只选择"),n("code",[s._v("UtilityLast")]),s._v("类型。")]),s._v(" "),n("p",[s._v("适用于：并集类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface UtilityFirst {\n    name: string\n}\n\ninterface UtilityLast {\n    age: number\n}\n\ntype TypesTest = UtilityFirst | UtilityLast;\n\nconst ObjJson: Extract<TypesTest, UtilityLast> = {\n    age: 1\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_3-readonly"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-readonly"}},[s._v("#")]),s._v(" 3. Readonly")]),s._v(" "),n("p",[s._v("把数组或对象的所有属性值转换为只读的。这里只演示一下对象栗子，数组同样的写法。")]),s._v(" "),n("p",[s._v("适用于：对象、数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface UtilityFirst {\n    name: string\n}\n\nconst ObjJson: Readonly<UtilityFirst> = {\n    name: "前端娱乐圈"\n}\nObjJson.name = "蛙人" // 报错 只读状态\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_4-partial"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-partial"}},[s._v("#")]),s._v(" 4. Partial")]),s._v(" "),n("p",[s._v("把对象的所有属性设置为选的。我们知道"),n("code",[s._v("interface")]),s._v("只要不设置"),n("code",[s._v("?")]),s._v("修饰符，那么对象都是必选的。这个实用类可以将属性全部转换为可选的。")]),s._v(" "),n("p",[s._v("适用于：对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface UtilityFirst {\n    name: string\n}\n\nconst ObjJson: Partial<UtilityFirst> = {\n\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_5-pick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-pick"}},[s._v("#")]),s._v(" 5. Pick")]),s._v(" "),n("p",[n("code",[s._v("Pick")]),s._v("选择对象类型中的部分"),n("code",[s._v("key")]),s._v("值，提取出来。第一个参数"),n("code",[s._v("目标值")]),s._v("，第二个参数联合"),n("code",[s._v("key")])]),s._v(" "),n("p",[s._v("适用于：对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface UtilityFirst {\n    name: string,\n    age: number,\n    hobby: []\n}\n\nconst ObjJson: Pick<UtilityFirst, "name" | "age"> = {\n    name: "前端娱乐圈",\n    age: 18\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_6-omit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-omit"}},[s._v("#")]),s._v(" 6. Omit")]),s._v(" "),n("p",[n("code",[s._v("Omit")]),s._v("选择对象类型中的部分"),n("code",[s._v("key")]),s._v("值，过滤掉。第一个参数"),n("code",[s._v("目标值")]),s._v("，第二个参数联合"),n("code",[s._v("key")])]),s._v(" "),n("p",[s._v("适用于：对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface UtilityFirst {\n    name: string,\n    age: number,\n    hobby: string[]\n}\n\nconst ObjJson: Pick<UtilityFirst, "name" | "age"> = {\n    hobby: ["code", "羽毛球"]\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_7-required"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-required"}},[s._v("#")]),s._v(" 7. Required")]),s._v(" "),n("p",[n("code",[s._v("Required")]),s._v("把对象所有可选属性转换成必选属性。")]),s._v(" "),n("p",[s._v("适用于：对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface UtilityFirst {\n    name?: string,\n    age?: number,\n    hobby?: string[]\n}\n\nconst ObjJson: Required<UtilityFirst> = {\n    name: "蛙人",\n    age: 18,\n    hobby: ["code"]\n}\n复制代码\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_8-record"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-record"}},[s._v("#")]),s._v(" 8. Record")]),s._v(" "),n("p",[s._v("创建一个对象结果集，第一个参数则是"),n("code",[s._v("key")]),s._v("值，第二个参数则是"),n("code",[s._v("value")]),s._v("值。规定我们只能创建这里面字段值。")]),s._v(" "),n("p",[s._v("适用于：对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('type IndexList = 0 | 1 | 2\n\nconst ObjJson: Record<IndexList, "前端娱乐圈"> = {\n    0: "前端娱乐圈",\n    1: "前端娱乐圈",\n    2: "前端娱乐圈"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);