(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{451:function(a,t,s){"use strict";s.r(t);var e=s(8),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"前端工程师生产环境-debugger-技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端工程师生产环境-debugger-技巧"}},[a._v("#")]),a._v(" 前端工程师生产环境 debugger 技巧")]),a._v(" "),t("h4",{attrs:{id:"导言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导言"}},[a._v("#")]),a._v(" "),t("strong",[a._v("导言")])]),a._v(" "),t("p",[a._v("开发环境 debug 是每个程序员上岗的必备技能。生产环境呢？虽然生产环境 debug 是一件非常不优雅的行为，但是由于种种原因，我们又不得不这么干。")]),a._v(" "),t("p",[a._v("那我们今天讲一讲如何使用 chrome 在生产环境进行 debug 。")]),a._v(" "),t("h3",{attrs:{id:"生产环境-debug-步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产环境-debug-步骤"}},[a._v("#")]),a._v(" "),t("strong",[a._v("生产环境 debug 步骤")])]),a._v(" "),t("p",[a._v('生产环境 debug 需要几步？这问题和"把大象装进冰箱拢共分几步"一样简单。')]),a._v(" "),t("p",[a._v("第一步，把冰箱门打开。F12 打开 devTools；")]),a._v(" "),t("p",[a._v("第二步，把大象装进冰箱。找到需要 debug 的前端文件，格式化，打断点，调试上下文，定位问题；")]),a._v(" "),t("p",[a._v("第三步，关闭冰箱门。解决问题。")]),a._v(" "),t("h3",{attrs:{id:"如何快速定位错误是前端还是后端接口返回的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何快速定位错误是前端还是后端接口返回的"}},[a._v("#")]),a._v(" "),t("strong",[a._v("如何快速定位错误是前端还是后端接口返回的？")])]),a._v(" "),t("p",[a._v("在把大象装进冰箱之前，先初步判断下，是否真的需要由你将大象装进冰箱。")]),a._v(" "),t("p",[a._v("首先我们需要判断，错误是前端还是后端报的，那么如何快速判断？")]),a._v(" "),t("h4",{attrs:{id:"方案一-根据对代码的实现的了解-判断报错属于前端还是后端。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案一-根据对代码的实现的了解-判断报错属于前端还是后端。"}},[a._v("#")]),a._v(" "),t("strong",[a._v("方案一：根据对代码的实现的了解，判断报错属于前端还是后端。")])]),a._v(" "),t("p",[a._v("这个方案前提是需要你对代码实现很熟悉，也是最简单的方式。")]),a._v(" "),t("h4",{attrs:{id:"方案二-前端代码全局搜索关键字-工程代码里搜索-控制台打开搜索。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案二-前端代码全局搜索关键字-工程代码里搜索-控制台打开搜索。"}},[a._v("#")]),a._v(" "),t("strong",[a._v("方案二：前端代码全局搜索关键字，工程代码里搜索/控制台打开搜索。")])]),a._v(" "),t("p",[a._v("对应工程 gitlab 或者 vscode 或者 devTools global search 里去进行全局搜索。")]),a._v(" "),t("h4",{attrs:{id:"方案三-翻阅-network-面板中的请求。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案三-翻阅-network-面板中的请求。"}},[a._v("#")]),a._v(" "),t("strong",[a._v("方案三：翻阅 network 面板中的请求。")])]),a._v(" "),t("p",[a._v("翻阅 network 面板中的请求，看下返回的 "),t("code",[a._v("response")]),a._v(" 是否携带错误提示，有则表示后端返回的；如果报错的接口刚好是以非"),t("code",[a._v("200")]),a._v(" 的状态返回，或者是由新的操作触发调用接口，我们很快就能查找到对应的接口，如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/8c2defd15497d3472f4d6d944e4814da.6ikonuhx6b.jpg",alt:""}})]),a._v(" "),t("h4",{attrs:{id:"方案四-使用-network-search-进行搜索。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案四-使用-network-search-进行搜索。"}},[a._v("#")]),a._v(" "),t("strong",[a._v("方案四：使用 network search 进行搜索。")])]),a._v(" "),t("p",[a._v("但是很多情况，接口业务错误会以 http status "),t("code",[a._v("200")]),a._v(" 的状态码返回，如果此时请求了大量的接口（举个例子：进入页面调用了大量的接口，其中有一个接口返回了错误信息），那么除了逐个翻阅 network 这种低效的方式，chrome devTools 还提供了 network search 面板这种更便捷的方式，可以搜索接口详细信息（包括详细的返回信息），返回匹配结果。")]),a._v(" "),t("p",[t("strong",[a._v("如何打开 network search 面板？")])]),a._v(" "),t("p",[a._v("在 network 面板中，按快捷键 "),t("code",[a._v("⌘ + F")]),a._v("（Mac）、 "),t("code",[a._v("CTRL + F")]),a._v("（Windows）可呼出 network search 面板。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/ab001eaaa3910a67df43ae185eb03b6e.3yeub7hyk3.jpg",alt:""}})]),a._v(" "),t("p",[a._v("如果确定需要你把大象装进冰箱，那把大象装进冰箱的技巧有哪些？")]),a._v(" "),t("h3",{attrs:{id:"如何快速定位到问题相关的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何快速定位到问题相关的代码"}},[a._v("#")]),a._v(" "),t("strong",[a._v("如何快速定位到问题相关的代码")])]),a._v(" "),t("h4",{attrs:{id:"global-search-全局搜素关键字-再定位到关键的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-search-全局搜素关键字-再定位到关键的代码"}},[a._v("#")]),a._v(" "),t("strong",[a._v("global search ，全局搜素关键字，再定位到关键的代码")])]),a._v(" "),t("p",[a._v("chrome devTools 的 global search 是一个非常实用的一个功能，当你不知道需要调试的代码在哪个文件时，当你是一个非常大的系统，引用了很多的资源文件，你可以使用 global search 进行搜索关键字，这个操作会搜索所有加载进来的资源，点击搜索结果，就可以使用 source 面板打开对应的资源文件，然后格式化代码，再然后在当前的文件内 再次搜索关键字，打断点。")]),a._v(" "),t("p",[t("strong",[a._v("打开 global search 快捷键：")])]),a._v(" "),t("p",[t("code",[a._v("⌘ + ⌥ + F")]),a._v(" （Mac），"),t("code",[a._v("CTRL + SHIFT + F")]),a._v(" （Windows）")]),a._v(" "),t("p",[a._v("看下图例子，我们随便找个页面根据提示搜索代码：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/ae6aed9159419e0bf042c96c8fbfd2a9.102k7p9p2q.jpg",alt:""}})]),a._v(" "),t("p",[a._v("可以尝试使用哪些关键字进行搜索：")]),a._v(" "),t("p",[a._v("(1) 页面存在明确的报错信息，且已经明确该错误文案是写在前端代码中错误信息文案。提示信息在 coding 过程中一般是使用 字符串，压缩混淆过程中一般是不会进行处理的，会保留原文，当然代码打包构建过程中，对代码压缩混淆也可以选择对中文进行 unicode 转码，此时如果关键字是中文，就需要先转码再搜索了。")]),a._v(" "),t("p",[a._v("(2) 已知相关代码中存在的编译混淆后依然还保留的的关键代码，会向外暴露的方法名；")]),a._v(" "),t("h3",{attrs:{id:"如何-debug-混淆后的-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-debug-混淆后的-js"}},[a._v("#")]),a._v(" "),t("strong",[a._v("如何 debug 混淆后的 js ？")])]),a._v(" "),t("p",[a._v("生产环境的 js 基本上都是混淆过的（点击了解前端代码的压缩混淆 (https://todo.com/)），压缩混淆的优点就不赘述了，压缩混淆后随之来的是生产环境调试的难度，虽然通过打断点，勉强还能看的懂，但是已经很反人类了。")]),a._v(" "),t("p",[a._v("我们用一个最简单的 demo ，对比一下代码生产环境构建编译前后的差距。")]),a._v(" "),t("p",[a._v("这里选择用 vue-cli 创建了一个最简单的 demo ，看下源代码和编译后的代码。")]),a._v(" "),t("p",[a._v("源代码：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/91c47bc5b3df9cf3924c4fd64f556a9f.3ns0i22qeq.jpg",alt:""}})]),a._v(" "),t("p",[a._v("构建编译后的代码（此处关闭了 sourceMap ）：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/989b2d0aeb467048f8dfc139df6a7a68.58hrhizxv5.jpg",alt:""}})]),a._v(" "),t("p",[a._v("这里我们看到构建编译后的代码做了压缩混淆，出现了出现了大量大的 "),t("code",[a._v("a")]),a._v(" 、"),t("code",[a._v("b")]),a._v(" 、 "),t("code",[a._v("c")]),a._v(" 、 "),t("code",[a._v("d")]),a._v(" 替换了原有的函数方法名、变量名，编译后的代码已经不是能通过单纯的读代码码能读懂的了。但是我们通过 debug ，大概还是能看得懂。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/00335c5c453751db288f7ac71b2a9e2f.99tqvx417x.jpg",alt:""}})]),a._v(" "),t("p",[a._v("那么有没有方式使用本地的 sourceMap 调试生产环境的代码？答案当然是有的。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/29edba8bdda8de0c95333b69f59a96f0.6m4alkazvw.jpg",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"如何在生产环境使用本地-sourcemap-调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在生产环境使用本地-sourcemap-调试"}},[a._v("#")]),a._v(" "),t("strong",[a._v("如何在生产环境使用本地 sourceMap 调试？")])]),a._v(" "),t("p",[a._v("第一步：打开混淆代码")]),a._v(" "),t("p",[a._v("第二步：右键 -> 选择【Add source map】")]),a._v(" "),t("p",[a._v("第三步：输入本地 sourceMap 的地址（此处需要启用一个静态资源服务，可以使用 http-server (https://www.npmjs.com/package/http-server)），完成。本地代码执行构建命令，注意需要打开 sourceMap 配置，编译产生出构建后的代码，此时构建后的结果会包含 sourceMap 文件。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/dfd1fad06d03307e8329e76426cafca7.5xb11jngvf.jpg",alt:""}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/273d05b74e21a886d1b6f4fb06f7c8d0.3d56owni96.jpg",alt:""}})]),a._v(" "),t("p",[a._v("关联上 sourceMap 后，我们就可以看到 sources -> page 面板上的变化了")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/fac5eb92b61ff1a3eacbf4e539d1d678.1e8zykhzxl.jpg",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"如何在-chrome-中修改代码并调试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在-chrome-中修改代码并调试"}},[a._v("#")]),a._v(" "),t("strong",[a._v("如何在 chrome 中修改代码并调试？")])]),a._v(" "),t("p",[a._v("开发环境中，我们可以直接在 IDE 中修改代码，代码的变更就直接更新到了浏览器中了。那么生产环境，我们可以直接在 chrome 中修改代码，然后立马看代码修改后的效果吗？")]),a._v(" "),t("p",[a._v("当然，你想要的 chrome devTools 都有。chrome devTools 提供了 local overrides 能力。")]),a._v(" "),t("h4",{attrs:{id:"local-overrides-如何工作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-overrides-如何工作的"}},[a._v("#")]),a._v(" "),t("strong",[a._v("local overrides 如何工作的？")])]),a._v(" "),t("p",[a._v("指定修改后的文件的本地保存目录，当修改完代码保存的时候，就会将修改后的文件保存到你指定的目录目录下，当再次加载页面的时候，对应的文件不再读取网络上的文件，而是读取存储在本地修改过的文件。")]),a._v(" "),t("h4",{attrs:{id:"local-overrides-如何使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-overrides-如何使用"}},[a._v("#")]),a._v(" "),t("strong",[a._v("local overrides 如何使用？")])]),a._v(" "),t("p",[a._v("首先，打开 sources 下的 overrides 面板；")]),a._v(" "),t("p",[a._v("然后，点击【select folder overrides】选择修改后的"),t("a",{attrs:{href:"https://cloud.tencent.com/product/cfs?from_column=20065&from=20065",target:"_blank",rel:"noopener noreferrer"}},[a._v("文件存储"),t("OutboundLink")],1),a._v("地址；")]),a._v(" "),t("p",[a._v("再然后，点击顶部的授权，确认同意；")]),a._v(" "),t("p",[a._v("最后，我们就可以打开文件修改，修改完成后保存，重新刷新页面后，修改后的代码就被执行到了。")]),a._v(" "),t("p",[a._v("⚠️注意，原js文件直接 format 是无法修改的；在代码 format 之前先添加无效代码进行代码变更进行保存，然后再 format 就可以修改；")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://Jonathan-Rao.github.io/picx-images-hosting/20251017/3a4b94f6b49996fb75c704b4d79a764a.7popyt3c7.jpg",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" "),t("strong",[a._v("总结")])]),a._v(" "),t("p",[a._v("chrome 调试技巧远远当然不只这些，以上只是生产环境 debug 的小技巧，祝愿大家用不到，最好的 bug 处理方式当然是事前，在上线前得到就解决；如果真的发生问题，如果做好监控和日志，在问题发生的第一时间发现并解决。")])])}),[],!1,null,null,null);t.default=r.exports}}]);