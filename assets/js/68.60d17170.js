(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{478:function(e,t,v){"use strict";v.r(t);var o=v(8),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"使用javascript的一些小技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用javascript的一些小技巧"}},[e._v("#")]),e._v(" 使用JavaScript的一些小技巧")]),e._v(" "),t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),t("p",[e._v("先来看使用数组中常用的一些小技巧。")]),e._v(" "),t("h3",{attrs:{id:"数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[e._v("#")]),e._v(" 数组去重")]),e._v(" "),t("p",[e._v("ES6提供了几种简洁的数组去重的方法，但该方法并不适合处理非基本类型的数组。对于基本类型的数组去重，可以使用"),t("code",[e._v("... new Set()")]),e._v("来过滤掉数组中重复的值，创建一个只有唯一值的新数组。")]),e._v(" "),t("p",[e._v("const array = [1, 1, 2, 3, 5, 5, 1]const uniqueArray = [...new Set(array)];\nconsole.log(uniqueArray);")]),e._v(" "),t("blockquote",[t("p",[e._v("Result:(4) [1, 2, 3, 5]")])]),e._v(" "),t("p",[e._v("这是ES6中的新特性，在ES6之前，要实现同样的效果，我们需要使用更多的代码。该技巧适用于包含基本类型的数组："),t("code",[e._v("undefined")]),e._v("、"),t("code",[e._v("null")]),e._v("、"),t("code",[e._v("boolean")]),e._v("、"),t("code",[e._v("string")]),e._v("和"),t("code",[e._v("number")]),e._v("。如果数组中包含了一个"),t("code",[e._v("object")]),e._v(","),t("code",[e._v("function")]),e._v("或其他数组，那就需要使用另一种方法。")]),e._v(" "),t("p",[e._v("除了上面的方法之外，还可以使用"),t("code",[e._v("Array.from(new Set())")]),e._v("来实现：")]),e._v(" "),t("p",[e._v("const array = [1, 1, 2, 3, 5, 5, 1]Array.from(new Set(array))")]),e._v(" "),t("blockquote",[t("p",[e._v("Result:(4) [1, 2, 3, 5]")])]),e._v(" "),t("p",[e._v("另外，还可以使用"),t("code",[e._v("Array")]),e._v("的"),t("code",[e._v(".filter")]),e._v("及"),t("code",[e._v("indexOf()")]),e._v("来实现：")]),e._v(" "),t("p",[e._v("const array = [1, 1, 2, 3, 5, 5, 1]array.filter((arr, index) => array.indexOf(arr) === index)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result:(4) [1, 2, 3, 5]")])]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("indexOf()")]),e._v("方法将返回数组中第一个出现的数组项。这就是为什么我们可以在每次迭代中将"),t("code",[e._v("indexOf()")]),e._v("方法返回的索引与当索索引进行比较，以确定当前项是否重复。")]),e._v(" "),t("h3",{attrs:{id:"确保数组的长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确保数组的长度"}},[e._v("#")]),e._v(" 确保数组的长度")]),e._v(" "),t("p",[e._v("在处理网格结构时，如果原始数据每行的长度不相等，就需要重新创建该数据。为了确保每行的数据长度相等，可以使用"),t("code",[e._v("Array.fill")]),e._v("来处理：")]),e._v(" "),t("p",[e._v("let array = Array(5).fill('');\nconsole.log(array);")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: (5) ["", "", "", "", ""]')])]),e._v(" "),t("h3",{attrs:{id:"数组映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组映射"}},[e._v("#")]),e._v(" 数组映射")]),e._v(" "),t("p",[e._v("不使用"),t("code",[e._v("Array.map")]),e._v("来映射数组值的方法。")]),e._v(" "),t("p",[e._v("const array = [\n{\nname: '大漠',\nemail: 'w3cplus@hotmail.com'\n},\n{\nname: 'Airen',\nemail: 'airen@gmail.com'\n}\n]const name = Array.from(array, ({ name }) => name)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: (2) ["大漠", "Airen"]')])]),e._v(" "),t("h3",{attrs:{id:"数组截断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组截断"}},[e._v("#")]),e._v(" 数组截断")]),e._v(" "),t("p",[e._v("如果你想从数组末尾删除值（删除数组中的最后一项），有比使用"),t("code",[e._v("splice()")]),e._v("更快的替代方法。")]),e._v(" "),t("p",[e._v("例如，你知道原始数组的大小，可以重新定义数组的"),t("code",[e._v("length")]),e._v("属性的值，就可以实现从数组末尾删除值：")]),e._v(" "),t("p",[e._v("let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(array.length)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 10array.length = 4console.log(array)\nResult: (4) [0, 1, 2, 3]")])]),e._v(" "),t("p",[e._v("这是一个特别简洁的解决方案。但是，"),t("code",[e._v("slice()")]),e._v("方法运行更快，性能更好：")]),e._v(" "),t("p",[e._v("let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];array = array.slice(0, 4);")]),e._v(" "),t("p",[e._v("console.log(array);")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: [0, 1, 2, 3]")])]),e._v(" "),t("h3",{attrs:{id:"过滤掉数组中的falsy值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤掉数组中的falsy值"}},[e._v("#")]),e._v(" 过滤掉数组中的falsy值")]),e._v(" "),t("p",[e._v("如果你想过滤数组中的falsy值，比如"),t("code",[e._v("0")]),e._v("、"),t("code",[e._v("undefined")]),e._v("、"),t("code",[e._v("null")]),e._v("、"),t("code",[e._v("false")]),e._v("，那么可以通过"),t("code",[e._v("map")]),e._v("和"),t("code",[e._v("filter")]),e._v("方法实现：")]),e._v(" "),t("p",[e._v("const array = [0, 1, '0', '1', '大漠', 'w3cplus.com', undefined, true, false, null, 'undefined', 'null', NaN, 'NaN', '1' + 0]array.map(item => {    return item\n}).filter(Boolean)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: (10) [1, "0", "1", "大漠", "w3cplus.com", true, "undefined", "null", "NaN", "10"]')])]),e._v(" "),t("h3",{attrs:{id:"获取数组的最后一项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取数组的最后一项"}},[e._v("#")]),e._v(" 获取数组的最后一项")]),e._v(" "),t("p",[e._v("数组的"),t("code",[e._v("slice()")]),e._v("取值为正值时，从数组的开始处截取数组的项，如果取值为负整数时，可以从数组末属开始获取数组项。")]),e._v(" "),t("p",[e._v("let array = [1, 2, 3, 4, 5, 6, 7]const firstArrayVal = array.slice(0, 1)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: [1]const lastArrayVal = array.slice(-1)\nResult: [7]")])]),e._v(" "),t("p",[e._v("console.log(array.slice(1))")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: (6) [2, 3, 4, 5, 6, 7]")])]),e._v(" "),t("p",[e._v("console.log(array.slice(array.length))")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: []")])]),e._v(" "),t("p",[e._v("正如上面示例所示，使用"),t("code",[e._v("array.slice(-1)")]),e._v("获取数组的最后一项，除此之外还可以使用下面的方式来获取数组的最后一项：")]),e._v(" "),t("p",[e._v("console.log(array.slice(array.length - 1))")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: [7]")])]),e._v(" "),t("h3",{attrs:{id:"过滤并排序字符串列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤并排序字符串列表"}},[e._v("#")]),e._v(" 过滤并排序字符串列表")]),e._v(" "),t("p",[e._v("你可能有一个很多名字组成的列表，需要过滤掉重复的名字并按字母表将其排序。")]),e._v(" "),t("p",[e._v("在我们的例子里准备用不同版本语言的JavaScript 保留字的列表，但是你能发现，有很多重复的关键字而且它们并没有按字母表顺序排列。所以这是一个完美的字符串列表(数组)来测试我们的JavaScript小知识。")]),e._v(" "),t("p",[e._v("var keywords = ['do', 'if', 'in', 'for', 'new', 'try', 'var', 'case', 'else', 'enum', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'delete', 'export', 'import', 'return', 'switch', 'typeof', 'default', 'extends', 'finally', 'continue', 'debugger', 'function', 'do', 'if', 'in', 'for', 'int', 'new', 'try', 'var', 'byte', 'case', 'char', 'else', 'enum', 'goto', 'long', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'final', 'float', 'short', 'super', 'throw', 'while', 'delete', 'double', 'export', 'import', 'native', 'public', 'return', 'static', 'switch', 'throws', 'typeof', 'boolean', 'default', 'extends', 'finally', 'package', 'private', 'abstract', 'continue', 'debugger', 'function', 'volatile', 'interface', 'protected', 'transient', 'implements', 'instanceof', 'synchronized', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];")]),e._v(" "),t("p",[e._v("因为我们不想改变我们的原始列表，所以我们准备用高阶函数叫做"),t("code",[e._v("filter")]),e._v("，它将基于我们传递的回调方法返回一个新的过滤后的数组。回调方法将比较当前关键字在原始列表里的索引和新列表中的索引，仅当索引匹配时将当前关键字push到新数组。")]),e._v(" "),t("p",[e._v("最后我们准备使用"),t("code",[e._v("sort")]),e._v("方法排序过滤后的列表，sort只接受一个比较方法作为参数，并返回按字母表排序后的列表。")]),e._v(" "),t("p",[e._v("在ES6下使用箭头函数看起来更简单:")]),e._v(" "),t("p",[e._v("const filteredAndSortedKeywords = keywords\n.filter((keyword, index) => keywords.lastIndexOf(keyword) === index)\n.sort((a, b) => a < b ? -1 : 1);")]),e._v(" "),t("p",[e._v("这是最后过滤和排序后的JavaScript保留字列表：")]),e._v(" "),t("p",[e._v("console.log(filteredAndSortedKeywords);")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']")])]),e._v(" "),t("h3",{attrs:{id:"清空数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清空数组"}},[e._v("#")]),e._v(" 清空数组")]),e._v(" "),t("p",[e._v("如果你定义了一个数组，然后你想清空它。 通常，你会这样做：")]),e._v(" "),t("p",[e._v("let array = [1, 2, 3, 4];function emptyArray() {\narray = [];\n}\nemptyArray();")]),e._v(" "),t("p",[e._v("但是，这有一个效率更高的方法来清空数组。 你可以这样写:")]),e._v(" "),t("p",[e._v("let array = [1, 2, 3, 4];function emptyArray() {\narray.length = 0;\n}\nemptyArray();")]),e._v(" "),t("h3",{attrs:{id:"拍平多维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拍平多维数组"}},[e._v("#")]),e._v(" 拍平多维数组")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("...")]),e._v("运算符，将多维数组拍平：")]),e._v(" "),t("p",[e._v("const arr = [1, [2, '大漠'], 3, ['blog', '1', 2, 3]]const flatArray = [].concat(...arr)")]),e._v(" "),t("p",[e._v("console.log(flatArray)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: (8) [1, 2, "大漠", 3, "blog", "1", 2, 3]')])]),e._v(" "),t("p",[e._v("不过上面的方法只适用于二维数组。不过通过递归调用，可以使用它适用于二维以下的数组：")]),e._v(" "),t("p",[e._v("function flattenArray(arr) {\nconst flattened = [].concat(...arr);\nreturn flattened.some(item => Array.isArray(item)) ? flattenArray(flattened) : flattened;\n}const array = [1, [2, '大漠'], 3, [['blog', '1'], 2, 3]]const flatArr = flattenArray(array)\nconsole.log(flatArr)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: (8) [1, 2, "大漠", 3, "blog", "1", 2, 3]')])]),e._v(" "),t("h3",{attrs:{id:"从数组中获取最大值和最小值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从数组中获取最大值和最小值"}},[e._v("#")]),e._v(" 从数组中获取最大值和最小值")]),e._v(" "),t("p",[e._v("可以使用"),t("code",[e._v("Math.max")]),e._v("和"),t("code",[e._v("Math.min")]),e._v("取出数组中的最大小值和最小值：")]),e._v(" "),t("p",[e._v("const numbers = [15, 80, -9, 90, -99]const maxInNumbers = Math.max.apply(Math, numbers)const minInNumbers = Math.min.apply(Math, numbers)")]),e._v(" "),t("p",[e._v("console.log(maxInNumbers)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 90console.log(minInNumbers)")])]),e._v(" "),t("blockquote",[t("p",[e._v("Result: -99")])]),e._v(" "),t("p",[e._v("另外还可以使用ES6的"),t("code",[e._v("...")]),e._v("运算符来完成：")]),e._v(" "),t("p",[e._v("const numbers = [1, 2, 3, 4];\nMath.max(...numbers)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 4Math.min(...numbers)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 1")])])]),e._v(" "),t("h2",{attrs:{id:"对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[e._v("#")]),e._v(" 对象")]),e._v(" "),t("p",[e._v("在操作对象时也有一些小技巧。")]),e._v(" "),t("h3",{attrs:{id:"使用-运算符合并对象或数组中的对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-运算符合并对象或数组中的对象"}},[e._v("#")]),e._v(" 使用"),t("code",[e._v("...")]),e._v("运算符合并对象或数组中的对象")]),e._v(" "),t("p",[e._v("同样使用ES的"),t("code",[e._v("...")]),e._v("运算符可以替代人工操作，合并对象或者合并数组中的对象。")]),e._v(" "),t("p",[e._v("// 合并对象const obj1 = {\nname: '大漠',\nurl: 'w3cplus.com'}const obj2 = {\nname: 'airen',\nage: 30}const mergingObj = {...obj1, ...obj2}")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {name: "airen", url: "w3cplus.com", age: 30}// 合并数组中的对象const array = [')])]),e._v(" "),t("p",[e._v("{")]),e._v(" "),t("p",[e._v("name: '大漠',")]),e._v(" "),t("p",[e._v("email: '"),t("a",{attrs:{href:"mailto:w3cplus@gmail.com"}},[e._v("w3cplus@gmail.com")]),e._v("'")]),e._v(" "),t("p",[e._v("},")]),e._v(" "),t("p",[e._v("{")]),e._v(" "),t("p",[e._v("name: 'Airen',")]),e._v(" "),t("p",[e._v("email: '"),t("a",{attrs:{href:"mailto:airen@gmail.com"}},[e._v("airen@gmail.com")]),e._v("'")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("]const result = array.reduce((accumulator, item) => {    return {")]),e._v(" "),t("p",[e._v("...accumulator,")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("}, {})")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {大漠: "'),t("a",{attrs:{href:"mailto:w3cplus@gmail.com"}},[e._v("w3cplus@gmail.com")]),e._v('", Airen: "'),t("a",{attrs:{href:"mailto:airen@gmail.com"}},[e._v("airen@gmail.com")]),e._v('"}')])]),e._v(" "),t("h3",{attrs:{id:"有条件的添加对象属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有条件的添加对象属性"}},[e._v("#")]),e._v(" 有条件的添加对象属性")]),e._v(" "),t("p",[e._v("不再需要根据一个条件创建两个不同的对象，以使它具有特定的属性。为此，使用"),t("code",[e._v("...")]),e._v("操作符是最简单的。")]),e._v(" "),t("p",[e._v("const getUser = (emailIncluded) => {    return {\nname: '大漠',\nblog: 'w3cplus',\n...emailIncluded && {email: 'w3cplus@hotmail.com'}\n}\n}const user = getUser(true)\nconsole.log(user)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {name: "大漠", blog: "w3cplus", email: "w3cplus@hotmail.com"}const userWithoutEmail = getUser(false)\nconsole.log(userWithoutEmail)\nResult: {name: "大漠", blog: "w3cplus"}')])]),e._v(" "),t("h3",{attrs:{id:"解构原始数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构原始数据"}},[e._v("#")]),e._v(" 解构原始数据")]),e._v(" "),t("p",[e._v("你可以在使用数据的时候，把所有数据都放在一个对象中。同时想在这个数据对象中获取自己想要的数据。在这里可以使用ES6的Destructuring特性来实现。比如你想把下面这个"),t("code",[e._v("obj")]),e._v("中的数据分成两个部分：")]),e._v(" "),t("p",[e._v("const obj = {\nname: '大漠',\nblog: 'w3cplus',\nemail: 'w3cplus@hotmail.com',\njoined: '2019-06-19',\nfollowers: 45}")]),e._v(" "),t("p",[e._v("let user = {}, userDetails = {}")]),e._v(" "),t("p",[e._v("({name: user.name, email: user.email, ...userDetails} = obj)")]),e._v(" "),t("blockquote",[t("p",[e._v('{name: "大漠", blog: "w3cplus", email: "'),t("a",{attrs:{href:"mailto:w3cplus@hotmail.com"}},[e._v("w3cplus@hotmail.com")]),e._v('", joined: "2019-06-19", followers: 45}')])]),e._v(" "),t("p",[e._v("console.log(user)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {name: "大漠", email: "'),t("a",{attrs:{href:"mailto:w3cplus@hotmail.com"}},[e._v("w3cplus@hotmail.com")]),e._v('"}')])]),e._v(" "),t("p",[e._v("console.log(userDetails)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {blog: "w3cplus", joined: "2019-06-19", followers: 45}')])]),e._v(" "),t("h3",{attrs:{id:"动态更改对象的key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态更改对象的key"}},[e._v("#")]),e._v(" 动态更改对象的key")]),e._v(" "),t("p",[e._v("在过去，我们首先必须声明一个对象，然后在需要动态属性名的情况下分配一个属性。在以前，这是不可能以声明的方式实现的。不过在ES6中，我们可以实现：")]),e._v(" "),t("p",[e._v("const dynamicKey = 'email'let obj = {\nname: '大漠',\nblog: 'w3cplus',\n[dynamicKey]: 'w3cplus@hotmail.com'}")]),e._v(" "),t("p",[e._v("console.log(obj)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: {name: "大漠", blog: "w3cplus", email: "'),t("a",{attrs:{href:"mailto:w3cplus@hotmail.com"}},[e._v("w3cplus@hotmail.com")]),e._v('"}')])]),e._v(" "),t("h3",{attrs:{id:"判断对象的数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断对象的数据类型"}},[e._v("#")]),e._v(" 判断对象的数据类型")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("Object.prototype.toString")]),e._v("配合闭包来实现对象数据类型的判断：")]),e._v(" "),t("p",[e._v("const isType = type => target => "),t("code",[e._v("[object ${type}]")]),e._v(" === Object.prototype.toString.call(target)const isArray = isType('Array')([1, 2, 3])")]),e._v(" "),t("p",[e._v("console.log(isArray)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: true")])]),e._v(" "),t("p",[e._v("上面的代码相当于：")]),e._v(" "),t("p",[e._v("function isType(type){\nreturn function (target) {\nreturn "),t("code",[e._v("[object ${type}]")]),e._v(" === Object.prototype.toString.call(target)\n}\n}")]),e._v(" "),t("p",[e._v("isType('Array')([1,2,3])")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: true")])]),e._v(" "),t("p",[e._v("或者：")]),e._v(" "),t("p",[e._v("const isType = type => target => "),t("code",[e._v("[object ${type}]")]),e._v(" === Object.prototype.toString.call(target)const isString = isType('String')const res = isString(('1'))")]),e._v(" "),t("p",[e._v("console.log(res)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: true")])]),e._v(" "),t("h3",{attrs:{id:"检查某对象是否有某属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检查某对象是否有某属性"}},[e._v("#")]),e._v(" 检查某对象是否有某属性")]),e._v(" "),t("p",[e._v("当你需要检查某属性是否存在于一个对象，你可能会这样做：")]),e._v(" "),t("p",[e._v("var obj = {\nname: '大漠'};if (obj.name) {\nconsole.log(true) // > Result: true}")]),e._v(" "),t("p",[e._v("这是可以的，但是你需要知道有两种原生方法可以解决此类问题。"),t("code",[e._v("in")]),e._v(" 操作符 和 "),t("code",[e._v("Object.hasOwnProperty")]),e._v("，任何继承自"),t("code",[e._v("Object")]),e._v("的对象都可以使用这两种方法。")]),e._v(" "),t("p",[e._v("var obj = {    name: '大漠'};")]),e._v(" "),t("p",[e._v("obj.hasOwnProperty('name');     // > true'name' in obj;                  // > trueobj.hasOwnProperty('valueOf');  // > false, valueOf 继承自原型链'valueOf' in obj;               // > true")]),e._v(" "),t("p",[e._v("两者检查属性的深度不同，换言之"),t("code",[e._v("hasOwnProperty")]),e._v("只在本身有此属性时返回"),t("code",[e._v("true")]),e._v(",而"),t("code",[e._v("in")]),e._v("操作符不区分属性来自于本身或继承自原型链。")]),e._v(" "),t("p",[e._v("这是另一个例子:")]),e._v(" "),t("p",[e._v("var myFunc = function() {    this.name = '大漠';\n};")]),e._v(" "),t("p",[e._v("myFunc.prototype.age = '10 days';var user = new myFunc();")]),e._v(" "),t("p",[e._v("user.hasOwnProperty('name');")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: trueuser.hasOwnProperty('age');")])]),e._v(" "),t("blockquote",[t("p",[e._v("Result: false, 因为age来自于原型链")])]),e._v(" "),t("h3",{attrs:{id:"创造一个纯对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创造一个纯对象"}},[e._v("#")]),e._v(" 创造一个纯对象")]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("Object.create(null)")]),e._v("可以创建一个纯对象，它不会从"),t("code",[e._v("Object")]),e._v("类继承任何方法（例如：构造函数、"),t("code",[e._v("toString()")]),e._v(" 等）：")]),e._v(" "),t("p",[e._v("const pureObject = Object.create(null);")]),e._v(" "),t("p",[e._v("console.log(pureObject);                //=> {}console.log(pureObject.constructor);    //=> undefinedconsole.log(pureObject.toString);       //=> undefinedconsole.log(pureObject.hasOwnProperty); //=> undefined")]),e._v(" "),t("h2",{attrs:{id:"数据类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[e._v("#")]),e._v(" 数据类型转换")]),e._v(" "),t("p",[e._v("JavaScript中数据类型有"),t("code",[e._v("Number")]),e._v("、"),t("code",[e._v("String")]),e._v("、"),t("code",[e._v("Boolean")]),e._v("、"),t("code",[e._v("Object")]),e._v("、"),t("code",[e._v("Array")]),e._v("和"),t("code",[e._v("Function")]),e._v("等，在实际使用时会碰到数据类型的转换。�在转换数据类型时也有一些小技巧。")]),e._v(" "),t("h3",{attrs:{id:"转换为布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换为布尔值"}},[e._v("#")]),e._v(" 转换为布尔值")]),e._v(" "),t("p",[e._v("布尔值除了"),t("code",[e._v("true")]),e._v("和"),t("code",[e._v("false")]),e._v('之外，JavaScript还可以将所有其他值视为"真实的"或"虚假的"。除非另有定义，JavaScript中除了'),t("code",[e._v("0")]),e._v("、"),t("code",[e._v("''")]),e._v("、"),t("code",[e._v("null")]),e._v("、"),t("code",[e._v("undefined")]),e._v("、"),t("code",[e._v("NaN")]),e._v("和"),t("code",[e._v("false")]),e._v("之外的值都是真实的。")]),e._v(" "),t("p",[e._v("我们可以很容易地在真和假之间使用"),t("code",[e._v("!")]),e._v("运算符进行切换，它也会将类型转换为"),t("code",[e._v("Boolean")]),e._v("。比如：")]),e._v(" "),t("p",[e._v("const isTrue = !0;const isFasle = !1;const isFasle = !!0 // !0 => true，true的反即是falseconsole.log(isTrue)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: trueconsole.log(typeof isTrue)\nResult: 'boolean'")])]),e._v(" "),t("p",[e._v("这种类型的转换在条件语句中非常方便，比如将"),t("code",[e._v("!1")]),e._v("当作"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"转换为字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换为字符串"}},[e._v("#")]),e._v(" 转换为字符串")]),e._v(" "),t("p",[e._v("我们可以使用运算符"),t("code",[e._v("+")]),e._v("后紧跟一组空的引号"),t("code",[e._v("''")]),e._v("快速地将数字或布尔值转为字符串：")]),e._v(" "),t("p",[e._v("const val = 1 + ''const val2 = false + ''console.log(val)")]),e._v(" "),t("blockquote",[t("p",[e._v('Result: "1"console.log(typeof val)\nResult: "string"console.log(val2)\nResult: "false"console.log(typeof val2)\nResult: "string"')])]),e._v(" "),t("h3",{attrs:{id:"转换为数值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换为数值"}},[e._v("#")]),e._v(" 转换为数值")]),e._v(" "),t("p",[e._v("上面我们看到了，使用"),t("code",[e._v("+")]),e._v("紧跟一个空的字符串"),t("code",[e._v("''")]),e._v("就可以将数值转换为字符串。相反的，使用加法运算符"),t("code",[e._v("+")]),e._v("可以快速实现相反的效果。")]),e._v(" "),t("p",[e._v("let int = '12'int = +intconsole.log(int)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 12console.log(typeof int)\nResult: 'number'")])]),e._v(" "),t("p",[e._v("用同样的方法可以将布尔值转换为数值：")]),e._v(" "),t("p",[e._v("console.log(+true)")]),e._v(" "),t("blockquote",[t("p",[e._v("Return: 1console.log(+false)\nReturn: 0")])]),e._v(" "),t("p",[e._v("在某些上下文中，"),t("code",[e._v("+")]),e._v("会被解释为连接操作符，而不是加法运算符。当这种情况发生时，希望返回一个整数，而不是浮点数，那么可以使用两个波浪号"),t("code",[e._v("~~")]),e._v("。双波浪号"),t("code",[e._v("~~")]),e._v("被称为按位不运算符，它和"),t("code",[e._v("-n - 1")]),e._v("等价。例如， "),t("code",[e._v("~15 = -16")]),e._v("。这是因为"),t("code",[e._v("- (-n - 1) - 1 = n + 1 - 1 = n")]),e._v("。换句话说，"),t("code",[e._v("~ - 16 = 15")]),e._v("。")]),e._v(" "),t("p",[e._v("我们也可以使用"),t("code",[e._v("~~")]),e._v("将数字字符串转换成整数型：")]),e._v(" "),t("p",[e._v("const int = ~~'15'console.log(int)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 15console.log(typeof int)\nResult: 'number'")])]),e._v(" "),t("p",[e._v("同样的，"),t("code",[e._v("NOT")]),e._v("操作符也可以用于布尔值： "),t("code",[e._v("~true = -2")]),e._v("，"),t("code",[e._v("~false = -1")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"浮点数转换为整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数转换为整数"}},[e._v("#")]),e._v(" 浮点数转换为整数")]),e._v(" "),t("p",[e._v("平常都会使用"),t("code",[e._v("Math.floor()")]),e._v("、"),t("code",[e._v("Math.ceil()")]),e._v("或"),t("code",[e._v("Math.round()")]),e._v("将浮点数转换为整数。在JavaScript中还有一种更快的方法，即使用"),t("code",[e._v("|")]),e._v("（位或运算符）将浮点数截断为整数。")]),e._v(" "),t("p",[e._v("console.log(23.9 | 0);")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 23console.log(-23.9 | 0);\nResult: -23")])]),e._v(" "),t("p",[t("code",[e._v("|")]),e._v("的行为取决于处理的是正数还是负数，所以最好只在确定的情况下使用这个快捷方式。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("n")]),e._v("是正数，则"),t("code",[e._v("n | 0")]),e._v("有效地向下舍入。如果"),t("code",[e._v("n")]),e._v("是负数，它有效地四舍五入。更准确的说，该操作删除小数点后的内容，将浮点数截断为整数。还可以使用"),t("code",[e._v("~~")]),e._v("来获得相同的舍入效果，如上所述，实际上任何位操作符都会强制浮点数为整数。这些特殊操作之所以有效，是因为一旦强制为整数，值就保持不变。")]),e._v(" "),t("p",[t("code",[e._v("|")]),e._v("还可以用于从整数的末尾删除任意数量的数字。这意味着我们不需要像下面这样来转换类型：")]),e._v(" "),t("p",[e._v('let str = "1553";\nNumber(str.substring(0, str.length - 1));')]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 155")])]),e._v(" "),t("p",[e._v("我们可以像下面这样使用"),t("code",[e._v("|")]),e._v("运算符来替代：")]),e._v(" "),t("p",[e._v("console.log(1553 / 10   | 0)")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 155console.log(1553 / 100  | 0)\nResult: 15console.log(1553 / 1000 | 0)\nResult: 1")])]),e._v(" "),t("h3",{attrs:{id:"使用-操作符转换布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-操作符转换布尔值"}},[e._v("#")]),e._v(" 使用"),t("code",[e._v("!!")]),e._v("操作符转换布尔值")]),e._v(" "),t("p",[e._v("有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回"),t("code",[e._v("true")]),e._v("值。为了做这样的验证，我们可以使用"),t("code",[e._v("!!")]),e._v("操作符来实现是非常的方便与简单。对于变量可以使用"),t("code",[e._v("!!variable")]),e._v("做检测，只要变量的值为:"),t("code",[e._v("0")]),e._v("、"),t("code",[e._v("null")]),e._v("、"),t("code",[e._v('" "')]),e._v("、"),t("code",[e._v("undefined")]),e._v("或者"),t("code",[e._v("NaN")]),e._v("都将返回的是"),t("code",[e._v("false")]),e._v("，反之返回的是"),t("code",[e._v("true")]),e._v("。比如下面的示例：")]),e._v(" "),t("p",[e._v("function Account(cash) {\nthis.cash = cash;    this.hasMoney = !!cash;\n}var account = new Account(100.50);\nconsole.log(account.cash);")]),e._v(" "),t("blockquote",[t("p",[e._v("Result: 100.50console.log(account.hasMoney);\nResult: truevar emptyAccount = new Account(0);\nconsole.log(emptyAccount.cash);\nResult: 0console.log(emptyAccount.hasMoney);\nResult: false")])]),e._v(" "),t("p",[e._v("在这个示例中，只要"),t("code",[e._v("account.cash")]),e._v("的值大于"),t("code",[e._v("0")]),e._v("，那么"),t("code",[e._v("account.hasMoney")]),e._v("返回的值就是"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("还可以使用"),t("code",[e._v("!!")]),e._v("操作符将truthy或falsy值转换为布尔值：")]),e._v(" "),t("p",[e._v('!!""        // > false!!0         // > false!!null      // > false!!undefined  // > false!!NaN       // > false!!"hello"   // > true!!1         // > true!!{}        // > true!![]        // >')])])}),[],!1,null,null,null);t.default=a.exports}}]);